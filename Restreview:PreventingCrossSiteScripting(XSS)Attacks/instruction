FULL-STACK DEVELOPMENT
Restreview: Preventing Cross Site Scripting (XSS) Attacks
Welcome to Restreview!

Restreview is an application that publicly compiles reviews on selected restaurants.

The product is in the very early stages, and we’re taking over the development of the landing page to review a restaurant. We’re working closely with a new intern and, unfortunately, the current code hasn’t been secured properly and is vulnerable to different types of XSS attacks!

For this project, we’ll focus on implementing best practices and adding layers of security to protect the app from DOM-Based, Reflected, and Stored XSS Attacks.

We’ll make use of helmet and express-validator as well as explore how to use alternative methods from the document object in order to prevent any potential attacks on the application.

Tasks
7/7 complete
Mark the tasks as complete by checking them off
Explore the App
1.
Take a look at app.js and home.ejs. The intern initially wrote this code, and, while they created a good first draft, there are some vulnerabilities in it. See if you can spot where exactly the XSS vulnerabilities lie and what can be done in order to secure the app.

You can type node app.js into the Terminal if you want to start the node server. Make sure to also refresh the mini-browser.


Hint
Pay close attention to the POST requests in app.js and some missing libraries that could be added.

Data Validation and Sanitization
2.
Restreviewer is currently storing all the reviews locally and the form to submit reviews is vulnerable to malicious code being injected into the server.

Begin by importing the check method from the express-validator at the top of app.js


Hint
You can import direct methods from a package by using curly brackets, { and }:

const { methodName1, methodName2 } = require("package");

3.
In the /review endpoint, use express-validator to ensure the following data to matches the format below:

Data Input	Format
email	Is an email
restaurant	Is not empty AND blacklists the characters < and >
rating	Is numeric
review	Is not empty AND blacklists the characters < and >
To test your changes, you can use Ctrl + C in the Terminal to stop the app and rerun it by typing node app.js again.


Hint
Some of the following methods from the documentation might be helpful:

notEmpty() Documentation

isNumeric() Documentation

blacklist() Documentation

You can chain multiple functions by doing:

body('input').function1().function2()

Protecting the DOM
4.
The intern currently wrote code in home.ejs that exposes a DOM-Based vulnerability by making use of document.write.

Find an alternative way to write content to the DOM.

Start by creating a new HTML tag with the id “urlinfo”.


Hint
Remember to add your HTML content within the <body> tags and not inside the <script> tags.

5.
Now that we have a separate HTML tag with a specific id, we can use getElementById to target that object and use textContent to assign it to document.baseURI.


Hint
You can append textContent after targeting an HTML element and assign it to whatever string (or method call) you’d like.

Securing Cookies and Headers
6.
Add a cookie object to the existing session and set the appropriate properties to secure the cookie.


Hint
The properties to add are secure and httpsOnly. Make sure you’ve set them to the appropriate values.

7.
Implement the helmet middleware.

Note: If you implement helmet properly, the mini browser may appear broken. This is because of the security headers helmet enables. While inconvenient for this exercise, this is good for real-world security!

An image of the mini browser with an error message saying it "refused to connect".


Hint
Remember to require the package and call helmet() when adding it as middleware.