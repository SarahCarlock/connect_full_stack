PROCESSES AND THREADS

Introduction to Processes
When using a computer, multiple programs can often be found running at the same time. Perhaps one for playing music, another for creating documents, and one for browsing the web. All of these programs have certain functionalities, but on their own they do nothing. To actually make use of them, they must be executed.

While a computer program is a static collection of coded instructions stored on a disk, a process is an abstraction representing the program when it is running. A process is created when a program is executed. These processes are not only central for the usability of a computer, but they are the building blocks of an operating system. Managing these processes is central to operating system development.

Processes can sometimes also be called “tasks” or “jobs”, although these definitions are ambiguous. The key defining factor is that processes generally operate independently and do not share data; for example, a music player program will launch a music player process that would be independent of the process managing an office suite.

Instructions
All of the processes running on your system can be found in the operating system’s process manager:

Task Manager in Windows
Activity Monitor in MacOS
System Monitor or top in most Linux Distributions




Lifecycle of a Process
To best optimize the performance of processes as their priority changes or as they wait for access to a limited resource, processes are put into one of five states:

New: The program has been started and waits to be added into memory in order to become a full process.
Ready: Process fully initialized, loaded into memory, and waiting to be picked up by the processor.
Running: Currently being executed by the processor.
Blocked: The process requires a contested resource that it must wait for.
Finished: The process has been completed.
The life cycle of a process is its journey between these five states, beginning with New and ending with Finished. As CPU cores traditionally only executed one task at a time, managing the state of processes allows the processor to interleave these tasks and allows multiple processes to best share these cores and other limited computer resources. For example, instead of a process occupying the processor while waiting for user input, it can be marked as blocked to have the processor focus on another process in the ready state until that input arrives.

Blocking isn’t inherently negative as some tasks require more time. Marking these processes as blocked allows the processor to prioritize other tasks, creating a more responsive and efficient system. Similarly, some processes may also be reverted to the Ready state through preemption, where tasks are temporarily interrupted by an external scheduler for urgent reasons, such as a hardware interrupt signal asking the system to shutdown.

All of these switching processes do come with overhead that is best to be avoided. This is called context switching and is typically an expensive operation as the current state of the process needs to be stored and then be reloaded later to resume execution.




Process Layout and Process Control Block
When a process is initialized, its layout within memory has four distinct sections:

A text section for the compiled code
A data section for initialized variables
A stack for local variables defined within functions
A heap for dynamic memory allocation
Processes are also initialized with a Process Control Block that is required by the operating system for managing the process. This contains:

A unique process ID and the ID of any parent processes that launched the current one
The current process state
How long the process has been running and any time limits the process may have
Allowed system resources and other permissions
The priority of the process
The program counter for the address of the instruction currently being executed
The address of other registers within the CPU holding intermediate values
Information required for memory management such as page and segment tables
Additionally, when one process launches another, the original enters a parent-child relationship with the newly-launched process that shares much of the above data. For example, when an existing music player process starts a new process for scanning the user’s music library, both of these processes generally share the same system resources and permissions. Parent processes usually also wait for their children to complete before terminating themselves, unless the child was created specifically to run independently in the background.